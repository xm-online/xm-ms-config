import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    id "org.sonarqube"
    id "io.spring.nohttp"
    id 'pmd'
    id "war"
    id "com.github.spotbugs"
    id 'io.spring.dependency-management' version '1.1.4'
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.icthh.xm.ms.configuration"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

assert System.properties["java.specification.version"] == "21"

apply from: "gradle/docker.gradle"
apply from: "gradle/version.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveFileName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.main.runtimeClasspath.files
                attributes "Class-Path": classpath.collect {f -> f.toURI().toString()}.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.icthh.xm.ms.scheduler.SchedulerApp"
}

bootWar {
    mainClass = 'com.icthh.xm.ms.configuration.ConfigurationApp'
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

String[] testCategories = ['com.icthh.xm.ms.configuration.AbstractSpringBootTest',
                           'com.icthh.xm.ms.configuration.AbstractUnitTest']

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "passed", "skipped", "failed"//, "standardError" //, "standardOut"
}

test {

    doFirst {
        println '!!! ATTENTION: start execution of non-categorized tests. it may impact test performance !!!'
    }

    dependsOn 'clean', 'runCategorizedTests'
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    mkdir("src/test/features")
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // to run all test that was not categorized
    useJUnit {
        excludeCategories(testCategories)
    }

    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = true
    testLogging testLoggingConf

    doLast {
        println '!!! ATTENTION: check if there are non-categorized tests !!!'
    }

}

tasks.register('runCategorizedTests', Test) {
    useJUnitPlatform {
        includeTags(testCategories)
    }
    testLogging testLoggingConf
}

tasks.register('testReport', TestReport) {
    destinationDirectory = file("$layout.buildDirectory/reports/tests")
    testResults.from(test)
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleToolVersion}"
    configFile file("qa/checkstyle.xml")
    checkstyleTest.enabled = false
}

spotbugs {
    toolVersion = "${spotbugsToolVersion}"
    ignoreFailures = true
}

pmd {
    toolVersion "${pmdToolVersion}"
    ignoreFailures = true
}

nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    configureEach {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
        }
    }
}

repositories {
    // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    implementation group: "tech.jhipster", name: "jhipster-framework"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"

    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"

    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"

    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"

    implementation "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-groovy:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep-annotation-processor:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-config:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-idp:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-request:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-topic:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}"

    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgit_version}"
    implementation("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${jgit_version}")

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"

    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
    testImplementation "com.github.stefanbirkner:system-rules:${system_rules_version}"
}

tasks.register('cleanResources', Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "8.10"
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}

processResources.dependsOn cleanResources,bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
